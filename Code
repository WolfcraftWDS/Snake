#Snake Game
#100% coded by WolfcraftWDS
#Do not reproduce or mark as your own

import turtle
import time
import random

delay = 0.1

# Score
score = 0
high_score = 0



#Screen Setup
wn = turtle.Screen()
wn.title("Snake Game by @WolfcraftWDS")
wn.bgcolor("blue")
wn.setup(width=800, height=800)
wn.tracer(0)

#Snake Head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0,0)
head.direction = "stop"

#Food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)

#Body
segments = []

#Pen
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 360)
pen.write("Score: 0  High Score: 0", align="center", font=("Courier", 24, "normal"))


#Functions
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

#Keyboard bindings
wn.listen()
wn.onkeypress(go_up, "w")
wn.onkeypress(go_down, "s")
wn.onkeypress(go_left, "a")
wn.onkeypress(go_right, "d")

#Main Loop
while True:
    wn.update()
    
    #Border collision
    if head.xcor()>390 or head.xcor()<-390 or head.ycor()>390 or head.ycor()<-390:
        time.sleep(1)
        head.goto(0,0)
        head.direction = "stop"
        
        
        #Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)
            
        #Clear segment list
        segments.clear()
        
        #Reset score
        score = 0
        
        
        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))       

 
    #Food collision
    if head.distance(food) <20:
       
       #Move food
        x = random.randint(-380, 380)
        y = random.randint(-380, 380)
        food.goto(x,y)
        
        #Add to body
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)
        
        #Shorten delay
        delay -= 0.001
        
        #Score increase
        score += 10
        
        if score > high_score:
            high_score = score
        
        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))       


    #Tail follow
    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1] .xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)
        
    #Move sg 0 to head
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y)
        
    move()
    
       #Body colisions
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"
            
            #Hide the segments
            for segment in segments:
                segment.goto(1000, 1000)
                
            #Clear segments list
                segments.clear()
  #Score reset
            score = 0
  #Score update
            pen.clear()
            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))       



    time.sleep(delay)
    
wn.mainloop()
